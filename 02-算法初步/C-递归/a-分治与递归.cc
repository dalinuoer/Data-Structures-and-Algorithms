/*
* 分治与递归
* Author: Qin Hao
* Date: 2020/5/1
*/

// 分治法，分而治之，将原问题划分为若干规模较小而结构与原问题相同或相似的子问题，
// 然后分别解决这些子问题，最后合并子问题的解，即可得到原问题的解。
// 三部曲：分解、解决、合并

// 一般把子问题个数为 1 的情况称为 减治，而把子问题个数大于 1 的情况称为 分治。
// 分治法作为一种算法思想，既可以使用递归的手段实现，也可以通过非递归的手段实现。
// 一般使用递归实现比较容易。

// 递归的两个重要概念：递归边界、递归式

// 求n的阶乘
int func(int n)
{
    if (n == 0) return 1; // 0! = 1 递归边界
    else return func(n - 1) * n; // n! = (n - 1)! * n 递归式
}
// Fibonacci数列
int fibonacci(int n)
{
    if (n == 0) return 1;
    else if (n == 1) return 1;
    else return fibonacci(n - 1) + fibonacci(n - 2);
}

// 全排列：一般把1 -- n这n个整数按某个顺序摆放的结果称为这n个数的一个排列，而全排列指这n个数能形成的所有排列。
// 现要求实现按字典序从小到大的顺序输出1 -- n的全排列，其中（a1，a2，a3...an）的字典序小于（b1，b2，b3...bn）
// 是指存在一个i，使得a1 = b1, a2 = b2,...,ai-1 = bi-1, ai < bi 成立
void fullPermutation(int n)
{
    
}